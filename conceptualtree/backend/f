CREATE OR REPLACE PROCEDURE update_karma() as $$
BEGIN


update backend_branch
set pre_karma = NULL;


update backend_branch
set pre_karma = backend_branch.likes
from backend_relations as br
Right join backend_branch as bb on br.child_id = bb.id
where br.child_id is Null and bb.id = backend_branch.id;

-- in loop while exist parent_karma is null
WHILE EXISTS (SELECT 1 FROM backend_branch WHERE pre_karma IS NULL) LOOP
update backend_branch
set pre_karma = se.karma + backend_branch.likes
from
	(select bb.id as idi, sum(bp.pre_karma) as karma
	from backend_branch as bn
	join backend_relations as rn on bn.id = rn.parent_id and bn.pre_karma is null
	right join backend_relations as r on r.child_id = rn.child_id
	join backend_branch as bb on r.child_id = bb.id and bb.pre_karma is null
	join backend_branch as bp on r.parent_id = bp.id
	where bn.id is null
	group by bb.id
	) se
where backend_branch.id = se.idi;
-- end loop
END LOOP;

update backend_branch
set karma = 0;

update backend_branch
set karma = sel.karma
from
(select br.parent_id as idiot, round(avg(backend_branch.pre_karma)/2) as karma
from backend_relations as br
join backend_relations as brc on br.child_id = brc.child_id
join backend_branch on backend_branch.id = brc.parent_id
group by br.parent_id) as sel
where backend_branch.id = sel.idiot;

update backend_branch
set karma = backend_branch.karma + sel.karma
from
(select br.child_id as idiot, sum(backend_branch.pre_karma) as karma
from backend_relations as br
 join backend_branch on backend_branch.id= br.parent_id
group by br.child_id) as sel
where backend_branch.id = sel.idiot;

END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION check_cyclicity() RETURNS trigger AS $$
DECLARE
  found_cycle boolean;
BEGIN
	IF (select count(*) from backend_relations where backend_relations.child_id = NEW.parent_id) = 0  THEN
    RETURN NEW;
  END IF;
  -- Check for cyclicity in the updated rows
  WITH RECURSIVE search_graph(child_id, parent_id, depth, path) AS (
    SELECT child_id, parent_id, 1, ARRAY[child_id]
    FROM backend_relations
    UNION ALL
    SELECT ur.child_id, ur.parent_id, sg.depth + 1, path || ur.child_id
    FROM search_graph sg, backend_relations ur
    WHERE sg.parent_id = ur.child_id AND NOT ur.child_id = ANY(path)
  )
  SELECT 1 FROM search_graph WHERE child_id = NEW.parent_id LIMIT 1 INTO found_cycle;

  IF found_cycle THEN
    RAISE EXCEPTION 'Cyclicity detected';
  END IF;

  RETURN NEW;
END;
$$ LANGUAGE plpgsql;



CREATE or replace TRIGGER check_cyclicity_trigger
BEFORE INSERT or update ON backend_relations
FOR EACH ROW
EXECUTE FUNCTION check_cyclicity();